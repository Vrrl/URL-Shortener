stages:
  - lint
  - test
  - build
  - deploy

variables: 
  PROJECT_SHORT_NAME: URLShortner
  TAG_LATEST: yvrrl/url_shortener:latest
  TAG_COMMIT: yvrrl/url_shortener:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

black_job:
  image: python:3.10
  stage: lint
  tags:
    - python
    - python:3.10
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - "/usr/local/lib/python3.10/site-packages"
    policy: pull
  before_script:
    - pip install black
  script:
    - black --fast .
  except:
    - stagging
    - master

flake8_job:
  image: python:3.10
  stage: lint
  tags:
    - python
    - python:3.10
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - "/usr/local/lib/python3.10/site-packages"
    policy: pull
  before_script:
    - pip install flake8
  script:
    - flake8 .
  except:
    - stagging
    - master

pytest_job:
  image: python:3.10
  stage: test
  tags:
    - python
    - python:3.10
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - "/usr/local/lib/python3.10/site-packages"
    policy: pull-push
  before_script:
    - pip install -r requirements.txt
  script:
    - pytest . --cov -v -s --cov-fail-under=60 --cov-report=xml:coverage.xml
    - pip show pytest
  only:
    changes:
      - src/**/*
      - tests/*
      - '*.py'
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

build_docker_image:
  stage: build
  image: docker:latest
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY_DOCKER 
  script:
    - echo "$CI_COMMIT_REF_NAME"
    - docker build -t $TAG_COMMIT `if [[ "$CI_COMMIT_REF_NAME" == *"prod"* ]]; then echo "-t $TAG_LATEST"; fi` .
    - docker push $TAG_COMMIT
    - if [[ "$CI_COMMIT_REF_NAME" == *"prod"* ]]; then docker push $TAG_LATEST; fi
  only:
    - stagging
    - tags

deploy_stagging_job:
  image: alpine:latest
  stage: deploy
  tags:
    - internal
  before_script:
    - export PROJECT_VERSION=$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
  script:
    - chmod og= $ID_RSA_STAGE
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA_STAGE -o StrictHostKeyChecking=no $SERVER_USER_STAGE@$SERVER_IP_STAGE -p $SERVER_SSH_PORT_STAGE "docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY_DOCKER"
    - ssh -i $ID_RSA_STAGE -o StrictHostKeyChecking=no $SERVER_USER_STAGE@$SERVER_IP_STAGE -p $SERVER_SSH_PORT_STAGE "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA_STAGE -o StrictHostKeyChecking=no $SERVER_USER_STAGE@$SERVER_IP_STAGE -p $SERVER_SSH_PORT_STAGE "docker container rm -f url-shortener || true"
    - ssh -i $ID_RSA_STAGE -o StrictHostKeyChecking=no $SERVER_USER_STAGE@$SERVER_IP_STAGE -p $SERVER_SSH_PORT_STAGE "docker run -d -p 80:8000 --restart always --name url-shortener -e PROJECT_VERSION=`printenv PROJECT_VERSION` $TAG_COMMIT"
  only:
    - stagging
  environment:
    name: internal-staging-pti
    deployment_tier: staging
    url: http://179.106.229.16:9080/docs

deploy_production_job:
  image: alpine:latest
  stage: deploy
  # tags:
  #   - internal
  before_script:
    - export PROJECT_VERSION=$CI_COMMIT_REF_NAME
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY_DOCKER"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f url-shortener || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:8000 --restart always --name url-shortener -e PROJECT_VERSION=`printenv PROJECT_VERSION` $TAG_COMMIT"
  only:
    - tags
  environment:
    name: aws-ec2-freetier-production
    deployment_tier: production
    url: http://35.172.234.30/docs